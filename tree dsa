Q.1. Implement Binary Tree
class TreeNode {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}



Q.2. Find height of a given tree
function findHeight(root) {
    if (root === null) return 0;
    return 1 + Math.max(findHeight(root.left), findHeight(root.right));
}

// Example usage:
const root = new TreeNode(1);
root.left = new TreeNode(2);
root.right = new TreeNode(3);
root.left.left = new TreeNode(4);
root.left.right = new TreeNode(5);
console.log(findHeight(root)); // Output: 3



Q.3. Perform Pre-order, Post-order, In-order traversal
function preOrderTraversal(root) {
    if (root === null) return;
    console.log(root.value);
    preOrderTraversal(root.left);
    preOrderTraversal(root.right);
}

function inOrderTraversal(root) {
    if (root === null) return;
    inOrderTraversal(root.left);
    console.log(root.value);
    inOrderTraversal(root.right);
}

function postOrderTraversal(root) {
    if (root === null) return;
    postOrderTraversal(root.left);
    postOrderTraversal(root.right);
    console.log(root.value);
}

// Example usage:
console.log("Pre-order:");
preOrderTraversal(root); // Output: 1 2 4 5 3

console.log("In-order:");
inOrderTraversal(root); // Output: 4 2 5 1 3

console.log("Post-order:");
postOrderTraversal(root); // Output: 4 5 2 3 1



Q.4. Function to print all the leaves in a given binary tree
function printLeaves(root) {
    if (root === null) return;
    if (root.left === null && root.right === null) {
        console.log(root.value);
    }
    printLeaves(root.left);
    printLeaves(root.right);
}

// Example usage:
console.log("Leaves:");
printLeaves(root); // Output: 4 5 3



Q.5. Implement BFS (Breadth-First Search) and DFS (Depth-First Search)
function bfs(root) {
    if (root === null) return;
    let queue = [root];

    while (queue.length > 0) {
        let node = queue.shift();
        console.log(node.value);

        if (node.left !== null) queue.push(node.left);
        if (node.right !== null) queue.push(node.right);
    }
}

function dfs(root) {
    if (root === null) return;
    let stack = [root];

    while (stack.length > 0) {
        let node = stack.pop();
        console.log(node.value);

        if (node.right !== null) stack.push(node.right);
        if (node.left !== null) stack.push(node.left);
    }
}

// Example usage:
console.log("BFS:");
bfs(root); // Output: 1 2 3 4 5

console.log("DFS:");
dfs(root); // Output: 1 2 4 5 3



Q.6. Find sum of all left leaves in a given Binary Tree
function sumOfLeftLeaves(root) {
    if (root === null) return 0;

    let sum = 0;

    if (root.left !== null && root.left.left === null && root.left.right === null) {
        sum += root.left.value;
    }

    sum += sumOfLeftLeaves(root.left);
    sum += sumOfLeftLeaves(root.right);

    return sum;
}

// Example usage:
console.log(sumOfLeftLeaves(root)); // Output: 4




Q.7. Find sum of all nodes of the given perfect binary tree
function sumOfNodes(root) {
    if (root === null) return 0;
    return root.value + sumOfNodes(root.left) + sumOfNodes(root.right);
}

// Example usage:
console.log(sumOfNodes(root)); // Output: 15


Q.8. Count subtrees that sum up to a given value x in a binary tree
function countSubtreesWithSumX(root, x) {
    if (root === null) return 0;

    let count = 0;

    function countSubtrees(node, x) {
        if (node === null) return 0;

        let sum = node.value + countSubtrees(node.left, x) + countSubtrees(node.right, x);

        if (sum === x) {
            count++;
        }

        return sum;
    }

    countSubtrees(root, x);
    return count;
}

// Example usage:
console.log(countSubtreesWithSumX(root, 5)); // Output: 2



Q.9. Find maximum level sum in Binary Tree
function maxLevelSum(root) {
    if (root === null) return 0;

    let queue = [root];
    let maxSum = -Infinity;

    while (queue.length > 0) {
        let levelSize = queue.length;
        let levelSum = 0;

        for (let i = 0; i < levelSize; i++) {
            let node = queue.shift();
            levelSum += node.value;

            if (node.left !== null) queue.push(node.left);
            if (node.right !== null) queue.push(node.right);
        }

        maxSum = Math.max(maxSum, levelSum);
    }

    return maxSum;
}

// Example usage:
console.log(maxLevelSum(root)); // Output: 7



Q.10. Print the nodes at odd levels of a tree
function printOddLevels(root) {
    if (root === null) return;

    let queue = [root];
    let level = 0;

    while (queue.length > 0) {
        let levelSize = queue.length;
        level++;

        for (let i = 0; i < levelSize; i++) {
            let node = queue.shift();
            if (level % 2 !== 0) {
                console.log(node.value);
            }

            if (node.left !== null) queue.push(node.left);
            if (node.right !== null) queue.push(node.right);
        }
    }
}

// Example usage:
console.log("Nodes at odd levels:");
printOddLevels(root); // Output: 1 4 5 3
